Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії



ЗВІТ
з практичної роботи №1
з дисципліни «Аналіз та рефакторинг коду»
на тему: «Правила оформлення програмного коду у JavaScript за Airbnb та Google JavaScript Style Guides»



Виконала ст. гр. ПЗПІ-23-9:
Курінна Д. С.

Перевірив:                                                                                                                             
ст. викладач кафедри ПІ  
Сокорчук І. П.



Харків 2025
ЗМІСТ
1 ІСТОРІЯ ЗМІН	3
2 ЗАВДАННЯ	4
3 ОПИС ВИКОНАНОЇ РОБОТИ	5
3.1 Вступ	5
3.2 Рекомендація 1. Підтримуйте чітку структуру проєкту	5
3.3 Рекомендація 2. Дотримуйтесь принципу єдиної відповідальності	7
3.4 Рекомендація 3. Застосовуйте коментарі для логічного поділу коду	7
3.5 Рекомендація 4. Використовуйте єдині правила відступів і форматування коду	9
3.6 Рекомендація 5. Використовуйте єдиний стиль дужок і відступів	10
3.7 Рекомендація 6. Використовуйте зрозумілі та узгоджені правила іменування змінних і функцій	11
3.8 Рекомендація 7. Уникайте «магічних» чисел і використовуйте константи	12
3.9 Рекомендація 8. Використовуйте коментарі лише там, де це дійсно необхідно	13
3.10  Рекомендація 9. Документуйте функції та класи за допомогою спеціалізованих коментарів	14
3.11 Рекомендація 10. Використовуйте інструменти перевірки стилю коду	15
3.12 Рекомендація 11. Використовуйте статичний аналіз для виявлення потенційних помилок	16
3.13 Рекомендація 12. Застосовуйте тестування під час розробки	17
3.14 Рекомендація 13. Розділяйте тестові сценарії на малі та вузько спрямовані перевірки	19
3.15 Рекомендація 14. Використовуйте інструменти автоматизації для перевірки якості коду	20
4 ВИСНОВКИ	22
5 ВИКОРИСТАНІ ДЖЕРЕЛА	23
ДОДАТОК А Відеозапис	24
ДОДАТОК Б Слайди презентації	25



1 ІСТОРІЯ ЗМІН
№
Дата
Версія звіту
Опис змін та виправлень
1
21.10.2025
1.0
Створено розділи «Завдання», «Опис виконаної роботи», «Використані джерела», «Висновки».
2
25.10.2025
1.0
Створено розділи «Додаток А», «Додаток Б», «Додаток В». 



2 ЗАВДАННЯ
     Ознайомитися з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду мовою JavaScript, навчити застосовувати принципи стилю програмування на практиці, аналізувати та рефакторити код для підвищення його якості, читабельності та продуктивності.


3 ОПИС ВИКОНАНОЇ РОБОТИ
     3.1 Вступ
     JavaScript — одна з найпопулярніших мов програмування у світі, що використовується як на стороні клієнта, так і на стороні сервера (завдяки середовищу Node.js). Її гнучкість, динамічна типізація та широка екосистема бібліотек зробили JavaScript основою сучасної веброзробки. Водночас ці переваги часто спричиняють появу неструктурованого або важкочитаного коду, що ускладнює його підтримку та розвиток.
     Для вирішення цієї проблеми розробники застосовують code conventions — стандартизовані правила, які визначають єдиний стиль написання програм. Найпоширенішими стандартами оформлення коду JavaScript є Airbnb JavaScript Style Guide та Google JavaScript Style Guide. Вони встановлюють чіткі вимоги до синтаксису, назв, форматування та структури коду, що допомагає командам підтримувати єдиний стиль, уникати помилок і підвищувати якість програмного забезпечення.
     Дотримання код-конвенцій сприяє:
• підвищенню читабельності коду;
• полегшенню командної роботи;
• зменшенню кількості помилок і суперечностей;
• спрощенню тестування та рефакторингу.
     У цій доповіді розглянуто основні правила оформлення коду мовою JavaScript, наведено приклади правильних і неправильних рішень, а також показано, як дотримання стандартів стилю позитивно впливає на якість і підтримуваність програмного забезпечення.
     3.2 Рекомендація 1. Підтримуйте чітку структуру проєкту
     Впорядкована структура є основою зрозумілого й підтримуваного коду. Кожен файл повинен мати визначене призначення та зберігатися у логічно побудованій директорії. Поділ проєкту на каталоги за функціональними напрямами — компоненти, утиліти, сервіси, тести — спрощує навігацію, командну роботу й подальший розвиток системи.
     Приклад поганого та гарного коду відповідно до правил:
     
1. // Поганий приклад
2. project/
3.   app.js
4.   utils.js
5.   data.js
6.   test1.js
7.   backup_old.js
8. // Гарний приклад
9. project/
10.   /src
11.     /components
12.       Header.js
13.     /utils
14.       helpers.js
15.     /services
16.       api.js
17.   /tests
18.     header.test.js
19.   package.json
20.   README.md
     
     Переваги дотримання правила:
1. Забезпечується зрозуміла навігація між компонентами проєкту.
2. Підвищується якість командної взаємодії завдяки єдиній структурі.
3. Зменшується ризик дублювання та помилок при модифікації коду.
4. Проєкт стає масштабованим і передбачуваним для подальшого розвитку.
     Наслідки недотримання:
     Невпорядкована структура призводить до хаосу у файловій системі, ускладнює розуміння архітектури проєкту, знижує ефективність командної роботи та створює труднощі під час інтеграції нових модулів або функціоналу.
     3.3 Рекомендація 2. Дотримуйтесь принципу єдиної відповідальності
     Кожен модуль, клас або функція має виконувати лише одне чітко визначене завдання. Такий підхід відповідає принципу єдиної відповідальності (Single Responsibility Principle, SRP) і забезпечує зрозумілу логіку, простоту тестування та легкість у подальшій підтримці коду.
     Приклад поганого та гарного коду відповідно до правил:
     
1 // Поганий приклад
2 class App {
3 addUser(user) { /* логіка користувачів */ }
4 saveToDB() { /* робота з базою */ }
5 sendEmails() { /* розсилка */ }
6 }
7 // Гарний приклад
8 // userService.js
9 export class UserService {
10 addUser(user) { /* робота з користувачами */ }
11 }
12 // database.js
13 export function saveToDB(data) { /* збереження */ }
14 // mailer.js
15 export function sendEmails() { /* надсилання */ }
     
     Переваги дотримання правила:
1. Код стає зрозумілим і легко підтримується.
2. Тестування та налагодження виконуються швидше.
3. Модулі можна використовувати повторно в інших проєктах.
4. Зміни в одному компоненті не впливають на роботу інших.
     Наслідки недотримання:
     Поєднання кількох функцій у межах одного класу призводить до надмірної складності, взаємозалежності компонентів і зростання ризику помилок при оновленні коду. У великих системах це ускладнює тестування, налагодження та командну розробку.
     3.4 Рекомендація 3. Застосовуйте коментарі для логічного поділу коду
     Коментарі є важливим засобом пояснення структури та логіки роботи програми. Вони допомагають іншим розробникам швидко зрозуміти функціональність, полегшують тестування та налагодження. Коментарі доцільно застосовувати для позначення логічних блоків, етапів обробки даних або складних алгоритмів. Водночас слід уникати надмірних чи очевидних пояснень, які лише ускладнюють сприйняття коду.
     Приклад поганого та гарного коду відповідно до правил:
     
1.	// Неправильний приклад
2.	// додаємо 1 до змінної
3.	count = count + 1;
4.	
5.	// цикл для проходження по масиву
6.	for (let i = 0; i < arr.length; i++) {
7.	  console.log(arr[i]);
8.	}
9.	// Правильний приклад
10.	// Ініціалізація даних
11.	const config = loadConfig();
12.	const userData = getUserData();
13.	
14.	// Основна логіка обробки
15.	function processData(data) {
16.	  if (!data) return; // Перевірка вхідних даних
17.	  return data.map(format);
18.	}
19.	
20.	// Вивід результату
21.	display(processData(userData));
     
     Переваги дотримання правила:
1. Коментарі підвищують читабельність коду та зрозумілість логіки.
2. Полегшують супровід і розширення проєкту іншими розробниками.
3. Допомагають швидше знаходити помилки та налагоджувати код.
     Наслідки недотримання:
     Відсутність структурованих коментарів ускладнює розуміння логіки програми, робить код важким для аналізу й підтримки. Надлишкові або тривіальні коментарі, навпаки, створюють шум і погіршують сприйняття.
     3.5 Рекомендація 4. Використовуйте єдині правила відступів і форматування коду
     Єдине форматування коду забезпечує його читабельність, полегшує командну співпрацю та зменшує кількість помилок при редагуванні. Правильне вирівнювання, послідовність відступів і дотримання довжини рядків сприяють кращому сприйняттю структури програми.
     У більшості стилістичних настанов (зокрема Airbnb та Google) рекомендується використовувати два пробіли для відступів і не перевищувати 80 – 100 символів у рядку.
     Приклад поганого та гарного коду відповідно до правил:
     
1. // Поганий приклад (невирівняні відступи)
2. function getUserData(){
3. console.log("Start");
4.     if(true){
5. console.log("Loaded");
6.     }
7. }
8. 
9. // Гарний приклад (чіткі відступи та пробіли)
10. function getUserData() {
11.   console.log("Start");
12.   if (true) {
13.     console.log("Loaded");
14.   }
15. }
16. 
17. // Поганий приклад — рядок занадто довгий
18. const message = "Welcome to our platform, where users can explore, interact, and contribute valuable content for the community.";
19. 
20. // Гарний приклад — рядок розбитий для зручності читання
21. const message =
22.   "Welcome to our platform, where users can explore, interact, " +
23.   "and contribute valuable content for the community.";
     
     Переваги дотримання правила:
1. Код виглядає структуровано та легко читається.
2. Зменшується кількість конфліктів під час злиття гілок у системах контролю версій.
3. Покращується якість перевірки коду та виявлення помилок.
     Наслідки недотримання:
     Непослідовне форматування створює візуальний безлад, ускладнює сприйняття логіки програми та уповільнює командну роботу.
     3.6 Рекомендація 5. Використовуйте єдиний стиль дужок і відступів
     Послідовне використання одного стилю дужок і відступів полегшує сприйняття структури коду та допомагає уникнути синтаксичних помилок. У JavaScript найчастіше застосовуються два підходи — K&R (Kernighan & Ritchie) та Allman. Вибір стилю не має значення, головне — використовувати його однаково в усіх файлах проєкту.
     Приклад поганого та гарного коду відповідно до правил:
     
1. // Поганий приклад (змішано різні стилі дужок)
2. function calculateSum(a, b)
3. {
4.   if (a > b) {
5.       return a - b;
6.   }
7.   else
8.   { return a + b; }
9. }
10. // Гарний приклад у стилі K&R
11. function calculateSum(a, b) {
12.   if (a > b) {
13.     return a - b;
14.   } else {
15.     return a + b;
16.   }
17. }
18. // Альтернатива — стиль Allman
19. function calculateSum(a, b)
20. {
21.   if (a > b)
22.   {
23.     return a - b;
24.   }
25.   else
26.   {
27.     return a + b;
28.   }
29. }
     
     Переваги дотримання правила:
1. Код стає візуально структурованим і легким для розуміння.
2. Знижується ризик помилок, пов’язаних із невірним розташуванням дужок.
3. Підтримка та перегляд коду відбуваються швидше.
     Наслідки недотримання:
     Змішування різних стилів дужок створює плутанину, ускладнює читання й підвищує ймовірність синтаксичних помилок.
     3.7 Рекомендація 6. Використовуйте зрозумілі та узгоджені правила іменування змінних і функцій
     Іменування — один із ключових аспектів якісного коду. Імена змінних, функцій і класів повинні відображати їх призначення, бути короткими, але зрозумілими.
Для JavaScript рекомендовано дотримуватися усталених стилів:
• camelCase — для змінних і функцій;
• PascalCase — для назв класів;
• UPPER_CASE — для констант.
Також варто уникати неінформативних назв, абревіатур і “магічних чисел”, замінюючи їх зрозумілими константами.
     Приклад поганого та гарного коду відповідно до правил:
     
1. // Поганий приклад
2. let d = 10;
3. let t = 20;
4. function clc(d, t) {
5.   return d * t * 0.5;
6. }
7. // Гарний приклад
8. const MAX_SPEED = 120;
9. 
10. function calculateDistance(time, speed) {
11.   return (speed * time) / 2;
12. }
13. 
14. class Vehicle {
15.   constructor(name) {
16.     this.name = name;
17.   }
18. }
     
     Переваги дотримання правила:
1. Код легше читати й розуміти навіть без коментарів.
2. Підвищується передбачуваність і спрощується налагодження.
3. Зменшується ризик плутанини між змінними та функціями.
     Наслідки недотримання:
     Непослідовні або неінформативні назви ускладнюють підтримку, знижують зрозумілість логіки програми й збільшують ризик помилок під час змін у коді.
     3.8 Рекомендація 7. Уникайте «магічних» чисел і використовуйте константи
     «Магічними» називають числа або значення, що з’являються в коді без пояснення їхнього змісту. Їх використання ускладнює розуміння логіки програми та створює ризик помилок при внесенні змін.
Щоб цього уникнути, такі значення варто зберігати у вигляді іменованих констант із чіткими назвами, що відображають їх призначення.
     Приклад поганого та гарного коду відповідно до правил:
     
1. // Поганий приклад
2. function calculateDiscount(price) {
3.   return price * 0.07; // Чому саме 0.07?
4. }
5. 
6. // Гарний приклад
7. const DISCOUNT_RATE = 0.07;
8. 
9. function calculateDiscount(price) {
10.   return price * DISCOUNT_RATE;
11. }
12. 
13. // Інший приклад — покращене читання умов
14. if (user.age > 18) { ... } // незрозуміло, що означає 18
15. if (user.age > MINIMUM_AGE) { ... } // значення має зміст}
     
     Переваги дотримання правила:
1. Код стає зрозумілішим і самодокументованим.
2. Спрощується внесення змін — досить змінити значення константи в одному місці.
3. Зменшується кількість логічних помилок у розрахунках та умовах.
     Наслідки недотримання:
     Множинні “магічні” значення ускладнюють підтримку, створюють плутанину та збільшують ризик помилок при зміні числових параметрів.
     3.9 Рекомендація 8. Використовуйте коментарі лише там, де це дійсно необхідно
     Коментарі мають пояснювати логіку або призначення коду, а не очевидні дії. Надлишок або неправильне використання коментарів знижує читабельність і створює плутанину.
     Добре написаний код повинен бути самодокументованим, тому коментарі варто додавати лише для пояснення складних рішень, алгоритмів чи нетипових підходів.
     Приклад поганого та гарного коду відповідно до правил:
     
1. // Поганий приклад — коментарі до очевидних дій
2. // Додаємо 1 до лічильника
3. count = count + 1;
4. 
5. // Створюємо цикл
6. for (let i = 0; i < arr.length; i++) {
7.   console.log(arr[i]);
8. }
9. 
10. // Гарний приклад — коментар пояснює логіку
11. // Обчислення середнього значення з урахуванням ваги елементів
12. function getWeightedAverage(data) {
13.   const totalWeight = data.reduce((sum, item) => sum + item.weight, 0);
14.   return data.reduce((acc, item) => acc + item.value * (item.weight / totalWeight), 0);
15. }
     
     Переваги дотримання правила:
1. Коментарі підсилюють розуміння складних ділянок коду.
2. Зменшується кількість застарілих або зайвих пояснень.
3. Код залишається чистим і легким для підтримки.
     Наслідки недотримання:
     Надлишкові або неінформативні коментарі створюють “шум”, уповільнюють читання коду та часто вводять в оману, якщо не оновлюються після змін у логіці.
     3.10  Рекомендація 9. Документуйте функції та класи за допомогою спеціалізованих коментарів
     Документаційні коментарі допомагають описати структуру та призначення коду в стандартизованій формі.
     У JavaScript для цього використовується формат JSDoc, який дозволяє автоматично створювати документацію з коду.
     Такі коментарі мають містити опис функції, перелік параметрів, типи даних і значення, що повертаються. Це підвищує зрозумілість коду й полегшує роботу з великими проєктами.
     Приклад правильного оформлення документаційного коментаря:
     
1. /**
2.  * Обчислює відсоткову знижку для вказаної ціни.
3.  *
4.  * @param {number} price - Початкова ціна товару.
5.  * @param {number} discount - Відсоток знижки (0–100).
6.  * @returns {number} Нова ціна з урахуванням знижки.
7.  */
8. function calculateDiscount(price, discount) {
9.   return price - price * (discount / 100);
10. }
11. 
12. /**
13.  * Клас, що представляє користувача системи.
14.  *
15.  * @class
16.  */
17. class User {
18.   /**
19.    * @param {string} name - Ім’я користувача.
20.    * @param {number} age - Вік користувача.
21.    */
22.   constructor(name, age) {
23.     this.name = name;
24.     this.age = age;
25.   }
26. }
     
     Переваги дотримання правила:
1. Кожен елемент коду має чітко визначене призначення й опис.
2. Полегшується автоматичне створення технічної документації.
3. Зменшується час на ознайомлення з новими модулями.
     Наслідки недотримання:
     Відсутність документування ускладнює розуміння логіки, знижує якість командної роботи та збільшує ризик помилок при оновленні функціоналу.
     3.11 Рекомендація 10. Використовуйте інструменти перевірки стилю коду
     Автоматичні інструменти перевірки стилю допомагають забезпечити єдність оформлення коду та виявляти помилки ще до етапу виконання.
     До найпопулярніших засобів належать ESLint і Prettier, які аналізують синтаксис, форматування, дублювання коду та відповідність стандартам (наприклад, Airbnb чи Google Style Guide). Їх використання дозволяє підтримувати якість проєкту навіть у великих командах і при швидкому темпі розробки.
     Приклад коду до форматування та після:
     
1. // Поганий приклад — відсутня узгодженість у форматуванні
2. function getUserData ( id ){
3. console.log( "Start" )
4. if(id>0){
5. console.log('Valid user');
6. }
7. else{
8. console.log( "Invalid user" )
9. }}
10. 
11. // Гарний приклад — відформатований автоматично за допомогою ESLint і Prettier
12. function getUserData(id) {
13.   console.log("Start");
14.   if (id > 0) {
15.     console.log("Valid user");
16.   } else {
17.     console.log("Invalid user");
18.   }
19. }
     
     Переваги дотримання правила:
1. Забезпечується узгоджений стиль і чистота коду.
2. Зменшується кількість синтаксичних та логічних помилок.
3. Полегшується колективна розробка й перевірка коду.
     Наслідки недотримання:
     Без автоматичної перевірки код поступово втрачає структуру, накопичуються дрібні помилки, а рев’ю вимагає значно більше часу.
     3.12 Рекомендація 11. Використовуйте статичний аналіз для виявлення потенційних помилок
     Статичний аналіз коду (наприклад, за допомогою SonarQube або Codacy) дозволяє виявляти ризиковані конструкції без запуску програми. Такі інструменти знаходять некоректну обробку помилок, небезпечні місця, дубльований код, недосяжні гілки виконання та потенційні проблеми безпеки. Це важливо на етапі розробки, до того як помилка потрапить у готовий продукт.
     Приклад поганого та гарного коду відповідно до правил:
     
1. // Поганий приклад — відсутня перевірка вхідних даних,
2. // можливе некоректне використання, потенційна помилка виконання
3. function divide(a, b) {
4.   return a / b; // Якщо b === 0, отримаємо Infinity або помилкову логіку
5. }
6. 
7. // Гарний приклад — код безпечніший і передбачуваний
8. function divide(a, b) {
9.   if (typeof a !== "number" || typeof b !== "number") {
10.     throw new Error("Invalid input type");
11.   }
12.   if (b === 0) {
13.     throw new Error("Division by zero is not allowed");
14.   }
15.   return a / b;
16. }
     
     У реальному проєкті статичний аналізатор позначить перший варіант як небезпечний (ризик ділення на нуль, відсутність перевірки типів, відсутність обробки помилок), а другий — як прийнятний.
     Переваги дотримання правила:
1. Ранні виявлення помилок і вразливостей без ручного перегляду всього коду.
2. Покращення надійності: функції стають передбачуваними в граничних випадках.
3. Зменшення кількості прихованих дефектів, які складно відловити тестами.
     Наслідки недотримання:
     Без статичного аналізу у коді накопичуються ризикові місця (наприклад, необроблені помилки, некоректні перевірки вхідних даних, надлишкові конструкції). Це ускладнює підтримку і може призвести до збоїв під час виконання.
     3.13 Рекомендація 12. Застосовуйте тестування під час розробки
     Тестування є необхідною частиною якісного коду. Підхід TDD (Test-Driven Development) передбачає, що спочатку пишеться тест, а потім — реалізація коду, яка цей тест задовольняє. Це допомагає чітко визначити очікувану поведінку функції, врахувати граничні випадки та уникнути прихованих логічних помилок.
     Приклад поганого та гарного коду відповідно до правил:

1. // Поганий приклад — функція без урахування граничних випадків
2. function getUserAge(user) {
3.   return user.age;
4. }
5. 
6. // Тут немає тесту, який би перевірив, що буде, якщо user або user.age відсутні
7. 
8. 
9. // Гарний приклад — функція написана з урахуванням вимог тесту
10. function getUserAge(user) {
11.   if (!user || typeof user.age !== "number") {
12.     return null;
13.   }
14.   return user.age;
15. }
16. 
17. // Приклад простого юніт-тесту (умовно в стилі Jest)
18. test("getUserAge повертає вік користувача", () => {
19.   expect(getUserAge({ age: 25 })).toBe(25);
20. });
21. 
22. test("getUserAge повертає null, якщо вік відсутній", () => {
23.   expect(getUserAge({})).toBeNull();
24. });
25. 
26. test("getUserAge повертає null, якщо аргумент некоректний", () => {
27.   expect(getUserAge(null)).toBeNull();
28. }); 
     
     У другому варіанті функція спроєктована з урахуванням того, що тест може викликати її з некоректними даними. Це робить поведінку передбачуваною.
     Переваги дотримання правила:
1. Зменшується кількість дефектів у критичних місцях коду.
2. Поведінка функцій формалізується: зрозуміло, що саме очікується на вхід і на вихід.
3. Тести дозволяють безпечно змінювати та рефакторити код у майбутньому.
     Наслідки недотримання:
     Без тестів код може працювати “в більшості випадків”, але некоректно поводитися на нештатних вхідних даних. Це особливо небезпечно в великих проєктах, де така помилка може залишатися непоміченою.
     3.14 Рекомендація 13. Розділяйте тестові сценарії на малі та вузько спрямовані перевірки
     Кожен тест повинен перевіряти лише один аспект функціональності. Надмірно великі тести, які охоплюють кілька функцій одночасно, ускладнюють виявлення помилок і знижують ефективність налагодження. Малі, незалежні тести швидше виконуються, легше підтримуються та дають точне уявлення про стабільність конкретного модуля.
     Приклад поганого та гарного коду відповідно до правил:

1. // Поганий приклад — один тест перевіряє надто багато функцій
2. test("Перевірка роботи користувача", () => {
3.   const user = new User("Anna", 25);
4.   expect(user.name).toBe("Anna");
5.   expect(user.getAge()).toBe(25);
6.   const order = new Order(user, 3);
7.   expect(order.getTotal()).toBe(300);
8.   expect(order.isValid()).toBe(true);
9. });
10. 
11. // Гарний приклад — окремі тести для кожної логічної частини
12. test("Користувач має правильне ім’я", () => {
13.   const user = new User("Anna", 25);
14.   expect(user.name).toBe("Anna");
15. });
16. 
17. test("Метод getAge() повертає правильне значення", () => {
18.   const user = new User("Anna", 25);
19.   expect(user.getAge()).toBe(25);
20. });
21. 
22. test("Замовлення обчислює правильну суму", () => {
23.   const order = new Order({ name: "Anna" }, 3);
24.   expect(order.getTotal()).toBe(300);
25. });
     
     Переваги дотримання правила:
1. Легше визначити, яка саме частина програми не працює.
2. Тести стають короткими, зрозумілими й швидкими у виконанні.
3. Полегшується оновлення коду без ризику “зламати” інші частини системи.
     Наслідки недотримання:
     Великі, змішані тести ускладнюють пошук помилок, вимагають більше часу на виконання й часто дають непередбачувані результати при зміні логіки.
     3.15 Рекомендація 14. Використовуйте інструменти автоматизації для перевірки якості коду
     Автоматизація контролю якості коду є необхідним етапом сучасної розробки програмного забезпечення. Її мета — вчасно запобігати помилкам і не допускати потрапляння некоректних змін у основну гілку проєкту.
     Для цього застосовуються такі підходи:
     1. Git Hooks
     На етапі створення коміту може автоматично запускатися перевірка стилю коду (наприклад, ESLint або Prettier) та базові тести. Якщо виявлено помилки форматування, синтаксису чи невідповідність стандартам оформлення, коміт блокується до виправлення. Таким чином запобігається додаванню у репозиторій коду, який не відповідає прийнятим правилам.
     2. Системи безперервної інтеграції (CI/CD)
     Під час відправлення змін у віддалений репозиторій або створення запиту на злиття (pull request) автоматично виконується набір перевірок: тестування, аналіз якості коду, пошук потенційних уразливостей, дотримання стильових вимог. Результат такої перевірки є частиною процесу ухвалення змін у основну гілку.
     3. Автоматичне застосування стилю.
     На етапі перевірки код може бути автоматично відформатований відповідно до узгодженого стилю (кількість відступів, лапки, крапка з комою тощо). Це знімає суперечки щодо оформлення в межах команди і дозволяє авторам змін зосереджуватися на логіці, а не на механічних деталях форматування.
     Переваги дотримання правила:
1. Підвищується стабільність коду: помилки виявляються до того, як зміни потрапляють у спільну гілку.
2. Забезпечується контроль якості на кожному кроці розробки (від локального коміту до інтеграції).
3. Зменшується кількість повторюваних ручних перевірок і спрощується процес рев’ю.
4. Впроваджується єдиний стандарт якості коду на рівні всього проєкту.
     Наслідки недотримання:
     За відсутності автоматизованих перевірок у репозиторій можуть потрапляти зміни з порушеннями стилю, неуспішними тестами або потенційно небезпечними фрагментами коду. Це призводить до накопичення технічного боргу, ускладнює супровід проєкту та збільшує ризик відмов у роботі системи.

4 ВИСНОВКИ
     У результаті виконання роботи було розглянуто основні принципи та правила оформлення коду мовою JavaScript, що ґрунтуються на міжнародних стандартах Airbnb та Google JavaScript Style Guide. Визначено значення єдиного стилю програмування для покращення читабельності, узгодженості та підтримуваності програмного коду.
     У ході дослідження проаналізовано способи структурування проєкту, форматування, іменування змінних і функцій, використання коментарів і документації. Окрему увагу приділено важливості тестування, автоматизації перевірок і статичного аналізу, що забезпечують стабільну якість програмного забезпечення.
     Дотримання стандартів оформлення коду сприяє підвищенню ефективності командної роботи, полегшує підтримку й розширення проєктів, зменшує кількість помилок і забезпечує створення надійного, зрозумілого та довговічного програмного продукту.
     


5 ВИКОРИСТАНІ ДЖЕРЕЛА
1. Google JavaScript Style Guide [Електронний ресурс]. — Режим доступу: https://google.github.io/styleguide/jsguide.html (дата звернення: 21.10.2025).
2. Airbnb JavaScript Style Guide [Електронний ресурс]. — Режим доступу: https://github.com/airbnb/javascript (дата звернення: 21.10.2025).
3. Мартін Р. К. Чистий код. Створення, аналіз та рефакторинг за допомогою Agile : пер. з англ. — Київ : Видавнича група «Основи», 2021. — 464 с.
4. W3Schools. JavaScript Coding Conventions [Електронний ресурс]. – Режим доступу: https://www.w3schools.com/js/js_conventions.asp (дата звернення: 21.10.2025).
5. Mozilla Developer Network (MDN). Code style guide – JavaScript [Електронний ресурс]. – Режим доступу: https://developer.mozilla.org/en-US/docs/MDN/Writing_guidelines/Code_style_guide/JavaScript (дата звернення: 21.10.2025).
6. JavaScript.info. Coding Style [Електронний ресурс]. – Режим доступу: https://javascript.info/coding-style (дата звернення: 21.10.2025).
7. Adobe Developer. JavaScript Coding Standards [Електронний ресурс]. – Режим доступу: https://developer.adobe.com/commerce/php/coding-standards/js/ (дата звернення: 21.10.2025).

8. 

ДОДАТОК А
Відеозапис
     Відеозапис доповіді: https://youtu.be/GPJvLBeDVuo
     Хронологічний опис відеозапису: 
Вступ - 00:38
Підтримуйте чітку структуру проєкту - 02:17
Дотримуйтесь принципу єдиної відповідальності - 03:00
Застосовуйте коментарі для логічного поділу коду - 03:43
Використовуйте єдині правила відступів і форматування коду - 04:18
Використовуйте єдиний стиль дужок і відступів - 04:52
Використовуйте зрозумілі та узгоджені правила іменування змінних і функцій - 05:25
Уникайте «магічних» чисел і використовуйте константи - 06:02
Використовуйте коментарі лише там, де це дійсно необхідно - 06:38
Документуйте функції та класи за допомогою спеціалізованих коментарів - 07:00
Використовуйте інструменти перевірки стилю коду - 07:47
Використовуйте статичний аналіз для виявлення потенційних помилок - 08:16
Застосовуйте тестування під час розробки - 08:58
Розділяйте тестові сценарії на малі та вузько спрямовані перевірки - 09:15
Використовуйте інструменти автоматизації для перевірки якості коду - 09:29
Висновки - 10:04
Використані джерела - 10:44


ДОДАТОК Б
Слайди презентації

Рисунок Б.1 – Титульний слайд


Рисунок Б.2 – Вступ


Рисунок Б.3 – Переваги дотримання код-конвенцій


Рисунок Б.4 – Рекомендація 1. Підтримуйте чітку структуру проєкту


Рисунок Б.5 – Рекомендація 2. Дотримуйтесь принципу єдиної відповідальності


Рисунок Б.6 – Рекомендація 3. Застосовуйте коментарі для логічного поділу коду




Рисунок Б.7 – Рекомендація 4. Використовуйте єдині правила відступів і форматування коду


Рисунок Б.8 – Рекомендація 5. Використовуйте єдиний стиль дужок і відступів

Рисунок Б.9 – Рекомендація 6. Використовуйте зрозумілі та узгоджені правила іменування змінних і функцій


Рисунок Б.10 – Рекомендація 7. Уникайте «магічних» чисел і використовуйте константи
 

Рисунок Б.11 – Рекомендація 8. Використовуйте коментарі лише там, де це дійсно необхідно


Рисунок Б.12 – Рекомендація 9. Документуйте функції та класи за допомогою спеціалізованих коментарів


Рисунок Б.13 – Рекомендація 10. Використовуйте інструменти


Рисунок Б.14 – Рекомендація 11. Використовуйте статичний аналіз для виявлення потенційних помилок


Рисунок Б.15 – Рекомендація 12. Застосовуйте тестування під час розробки


Рисунок Б.16 – Рекомендація 13. Розділяйте тестові сценарії на малі та вузько спрямовані перевірки


Рисунок Б.17 – Рекомендація 14. Використовуйте інструменти автоматизації для перевірки якості коду


Рисунок Б.18 – Висновки


Рисунок Б.19 – Використані джерела

     
2


